* System Requirements
  This configuration relies on certain software to be installed on the host system.
  #+BEGIN_SRC bash
    yay -S ttf-hack
  #+END_SRC
* General Settings
** Font
   Requires the ~ttf-hack~ font package.
   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Hack 10" nil t)
   #+END_SRC
** Tab Width
   #+BEGIN_SRC emacs-lisp
     (setq default-tab-width 2)
   #+END_SRC
** Don't show extraneous bars
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC
** Highlight Lines
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode +1)
   #+END_SRC
** Line Numbers
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC
** Matching Parens
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC
** Disable Startup Message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
* General Packages
** Evil Mode
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t ;; install the evil package if not installed
       :init ;; tweak evil's configuration before loading it
       (setq evil-search-module 'evil-search)
       (setq evil-ex-complete-emacs-commands nil)
       (setq evil-vsplit-window-right t)
       (setq evil-split-window-below t)
       (setq evil-shift-round nil)
       (setq evil-want-C-u-scroll t)
       :config ;; tweak evil after loading it
       (evil-mode))
   #+END_SRC
** General (Keybindings)
   #+BEGIN_SRC emacs-lisp
     (use-package general
       :ensure t)
   #+END_SRC
** Which-Key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC
** Counsel
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t)
   #+END_SRC
** Swiper
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t)
   #+END_SRC
** Ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       ;; enable this if you want `swiper' to use it
       (setq search-default-mode #'char-fold-to-regexp)
       (global-set-key "\C-s" 'swiper)
       (global-set-key (kbd "C-c C-r") 'ivy-resume)
       (global-set-key (kbd "<f6>") 'ivy-resume)
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file)
       (global-set-key (kbd "<f1> f") 'counsel-describe-function)
       (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
       (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
       (global-set-key (kbd "<f1> l") 'counsel-find-library)
       (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
       (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
       (global-set-key (kbd "C-c g") 'counsel-git)
       (global-set-key (kbd "C-c j") 'counsel-git-grep)
       (global-set-key (kbd "C-c k") 'counsel-ag)
       (global-set-key (kbd "C-x l") 'counsel-locate)
       (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (define-key evil-normal-state-map (kbd "SPC p") #'projectile-command-map)
       (projectile-mode +1)
       (setq projectile-enable-caching t
	     projectile-indexing-method 'native)) 

     (use-package counsel-projectile
       :ensure t
       :config
       (counsel-projectile-mode +1))
   #+END_SRC
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init
       (setq company-tooltip-align-annotations t
	     company-idle-delay 0.1)
       (add-hook 'after-init-hook 'global-company-mode)
       :config
       (general-define-key
	:keymaps 'company-active-map
	"<tab>" 'company-select-next
	"<backtab>" 'company-select-previous))

   #+END_SRC
** LSP
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :commands lsp
       :ensure t
       :hook
       (elixir-mode . lsp)
       :init
       (add-to-list 'exec-path (expand-file-name "~/.emacs.d/elixir-ls/release"))
       :config
       (add-hook 'lsp-after-open-hook 'lsp-enable-imenu))


     (use-package lsp-ui
       :ensure t
       :config
       (setq lsp-ui-doc-max-height 13
	     lsp-ui-doc-max-width 80
	     lsp-ui-sideline-ignore-duplicate t
	     lsp-ui-doc-header t
	     lsp-ui-doc-include-signature t
	     lsp-ui-doc-position 'bottom
	     lsp-ui-doc-use-webkit nil
	     lsp-ui-flycheck-enable t
	     lsp-ui-flycheck-list-position 'right
	     lsp-ui-imenu-kind-position 'left
	     lsp-ui-sideline-code-actions-prefix "💡"
	     ;; fix for completing candidates not showing after “Enum.”:
	     company-lsp-match-candidate-predicate #'company-lsp-match-candidate-prefix)
       (add-hook 'lsp-mode-hook 'lsp-ui-mode))

     (use-package company-lsp
       :ensure t
       :config
       (push 'company-lsp company-backends))
   #+END_SRC
** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :config
       (setq
	yas-verbosity 1
	yas-wrap-around-region t)

       (with-eval-after-load 'yasnippet
	 (setq yas-snippet-dirs '(yasnippet-snippets-dir)))

       (yas-reload-all)
       (yas-global-mode 1))

     (use-package yasnippet-snippets
       :ensure t)
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode))
   #+END_SRC
** Smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :config
       (smartparens-global-mode 1))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :config
       (define-key evil-normal-state-map (kbd "SPC g g") #'magit-status))

     (use-package evil-magit
       :ensure t)
   #+END_SRC
** Git Gutter
   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter
       :ensure t
       :config
       (global-git-gutter-mode +1))
   #+END_SRC
** Iedit
   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :ensure t)
   #+END_SRC
** Undo Tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :init
       (global-undo-tree-mode))
   #+END_SRC
** Highlight TODOs
   #+BEGIN_SRC emacs-lisp
     (use-package hl-todo
       :ensure t
       :config
       (global-hl-todo-mode t))
   #+END_SRC
** Prettify Symbols
   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode 1)
     (add-hook 'prog-mode-hook (lambda ()
				 (setq prettify-symbols-alist '(("===" . ?≡) ("|>" . ?▷) ("!=" . ?≠)
								("!==" . ?≢) (">=" . ?≥) ("<=" . ?≤)
								("alpha" . ?α) ("beta" . ?β) ("gamma" . ?γ)
								("delta" . Δ) ("epsilon" . ?ε) ("zeta" . ?ζ)
								("eta" . ?η) ("theta" . ?θ) ("lambda" . ?λ)
								("micro" . ?μ) ("pi" . ?π) ("rho" . ?ρ)
								("sigma" . ?σ) ("phi" . ?φ) ("omega" . ?Ω)
								("sqrt" . ?√) ("sum" . ∑) ("infinity" . ∞)
								("Infinity" . ∞) ("=>" . ?⇒) ("->" . ?→)))))
   #+END_SRC
* UI
** Theme
   #+BEGIN_SRC emacs-lisp
     ;; (use-package doom-themes
     ;;   :ensure t
     ;;   :config
     ;;   (load-theme 'doom-nord t))
     (load-file "~/.emacs.d/zenburn-theme.el")
   #+END_SRC
** Modeline
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :ensure t
       :hook (after-init . doom-modeline-mode))
   #+END_SRC
** Icons 
   Remember to run ~M-x "all-the-icons-install-fonts"~ on a fresh install
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t)

     (use-package all-the-icons-ivy
       :ensure t
       :config
       (all-the-icons-ivy-setup))
   #+END_SRC
** Centaur Tabs
   #+BEGIN_SRC emacs-lisp
     (use-package centaur-tabs
       :ensure t
       :config
       (setq centaur-tabs-set-bar 'under
	     x-underline-at-descent-line t
	     centaur-tabs-style "box"
	     centaur-tabs-set-icons t
	     centaur-tabs-gray-out-icons 'buffer
	     centaur-tabs-height 20
	     centaur-tabs-set-modified-marker t
	     centaur-tabs-modifier-marker "•")
       (centaur-tabs-mode t))
   #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :init
       (setq dashboard-items '((recents . 5) (projects . 5) (bookmarks . 5)))
       (setq dashboard-center-content t)
       (setq dashboard-set-file-icons t)
       (setq dashboard-set-heading-icons t)
       (setq dashboard-banner-logo-title "Big big code time.")
       :hook
       (after-init . dashboard-setup-startup-hook))

     (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
   #+END_SRC
* Org Mode
** Org Bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
* Lisp
** Parinfer
   #+BEGIN_SRC emacs-lisp
     (use-package parinfer
       :ensure t
       :init
       (progn
	 (setq parinfer-extensions
	       '(defaults
		  pretty-parens
		  evil
		  smart-tab
		  smart-yank))))

     (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
     (add-hook 'lisp-mode-hook #'parinfer-mode)
     (add-hook 'common-lisp-mode-hook #'parinfer-mode)
   #+END_SRC
* Javascript/Typescript
** Web Mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :mode
       (("\\.tsx$" . web-mode)
	("\\.leex$" . web-mode)
	("\\.eex$" . web-mode))
       :config
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-code-indent-offset 2)
       (setq web-mode-script-padding 2)
       (setq web-mode-block-padding 2)
       (setq web-mode-style-padding 2)
       (setq web-mode-enable-auto-pairing t)
       (setq web-mode-enable-auto-closing t)
       (setq web-mode-enable-current-element-highlight t)
       (setq web-mode-engines-alist '(("elixir" . "\\.ex\\'"))))
   #+END_SRC
** Emmet Mode
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :ensure t
       :config
       (add-hook 'web-mode-hook 'emmet-mode))
   #+END_SRC
** Typescript Mode
   #+BEGIN_SRC emacs-lisp
     (use-package typescript-mode
       :ensure t)
     (setq typescript-indent-level 2)
   #+END_SRC
** TIDE
   #+BEGIN_SRC emacs-lisp
     (use-package tide
       :ensure t
       :config
       (defun setup-tide-mode ()
	 (interactive)
	 (tide-setup)
	 (setq flycheck-check-syntax-automatically '(save-mode-enabled))
	 (flycheck-mode +1)
	 (eldoc-mode +1)
	 (tide-hl-identifier-mode +1)
	 (general-define-key
	  :keymaps 'tide-mode-map
	  :states 'normal
	  :prefix "SPC t"
	  "f" 'tide-fix
	  "i" 'tide-organize-imports
	  "d" 'tide-documentation-at-point

	  "e e" 'tide-error-at-point
	  "e l" 'tide-project-errors
	  "e n" 'flycheck-next-error
	  "e p" 'flycheck-previous-error

	  "d" 'tide-jump-to-definition
	  "D" 'tide-jump-to-implementation
	  "b" 'tide-jump-back
	  ))
       (add-hook 'js-mode-hook #'setup-tide-mode)
       (add-hook 'typescript-mode-hook #'setup-tide-mode)
       (add-hook 'web-mode-hook #'setup-tide-mode))
   #+END_SRC
** Prettier
   #+BEGIN_SRC emacs-lisp
     (use-package prettier-js
       :ensure t
       :config
       (add-hook 'typescript-mode-hook 'prettier-js-mode)
       (add-hook 'tide-mode-hook 'prettier-js-mode))
   #+END_SRC
* YML
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
  #+END_SRC
* Elixir
  Elixir intellisense relies partially on ~elixir-ls~. 
  Make sure that ~elixir-ls~ is in the ~.emacs.d~ directory and do the following:
  #+BEGIN_SRC bash
  git clone https://github.com/JakeBecker/elixir-ls
  cd elixir_ls
  mix deps.get
  mix compile
  mix elixir_ls.release -o release
  #+END_SRC
** Elixir Mode (with support for Phoenix Liveview templating)
   #+BEGIN_SRC emacs-lisp
     (use-package elixir-mode
       :ensure t)
     (use-package polymode
       :mode ("\\.ex\\'" . poly-elixir-web-mode)
       :config
       (define-hostmode poly-elixir-hostmode :mode 'elixir-mode)
       (define-innermode poly-liveview-expr-elixir-innermode
	 :mode 'web-mode
	 :head-matcher (rx line-start (* space) "~L" (= 3 (char "\"'")) line-end)
	 :tail-matcher (rx line-start (* space) (= 3 (char "\"'")) line-end)
	 :head-mode 'host
	 :tail-mode 'host
	 :allow-nested nil
	 :fallback-mode 'host)
       (define-polymode poly-elixir-web-mode
	 :hostmode 'poly-elixir-hostmode
	 :innermodes '(poly-liveview-expr-elixir-innermode)))

     (defun elixir-format-save-hook ()
       (when (eq major-mode 'elixir-mode)
	 (elixir-format)))

     (add-hook 'before-save-hook #'elixir-format-save-hook)
   #+END_SRC
** Alchemist
   #+BEGIN_SRC emacs-lisp
     (use-package alchemist
       :after (elixir-mode)
       :ensure t)
   #+END_SRC
** Elixir Yasnippets
   #+BEGIN_SRC emacs-lisp
     (use-package elixir-yasnippets
       :ensure t)
   #+END_SRC
** Flycheck Credo
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-credo
       :ensure t
       :config
       (flycheck-credo-setup))
   #+END_SRC
   
** Keybindings
   #+BEGIN_SRC emacs-lisp
	(general-define-key
	 :keymaps 'elixir-mode-map
	 :states 'normal
	 :prefix "SPC e"
	 "g d" 'alchemist-goto-definition-at-point
	 "g b" 'alchemist-goto-jump-back
	 "m" 'alchemist-mix

	 "e n" 'flycheck-next-error
	 "e p" 'flycheck-previous-error)
   #+END_SRC
